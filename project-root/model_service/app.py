from flask import Flask, request, jsonify
from flask_cors import CORS
import pickle
import pandas as pd
import numpy as np

app = Flask(__name__)
CORS(app)

# ƒê·ªãnh nghƒ©a ƒë∆∞·ªùng d·∫´n m√¥ h√¨nh (ch·ªânh l·∫°i n·∫øu c·∫ßn)
MODEL_PATH = "/home/nhathuy/CMU_CS_462_VIS_G1/project-root/model_service/software_effort_model.pkl"


# Load model t·ª´ file
with open(MODEL_PATH, "rb") as model_file:
    model = pickle.load(model_file)

# Ki·ªÉm tra model ƒë√£ load ƒë√∫ng ch∆∞a
if not hasattr(model, "predict"):
    raise ValueError("‚ùå L·ªói: Model kh√¥ng c√≥ ph∆∞∆°ng th·ª©c 'predict'. H√£y ki·ªÉm tra l·∫°i file .pkl!")

# @app.route("/predict", methods=["POST"])
# def predict():
#     try:
#         data = request.get_json()
#         print("üìå D·ªØ li·ªáu nh·∫≠n ƒë∆∞·ª£c:", data)  # Debug xem nh·∫≠n ƒë∆∞·ª£c g√¨

#         # Ki·ªÉm tra n·∫øu key "feature" c√≥ t·ªìn t·∫°i trong JSON kh√¥ng
#         if "feature" not in data:
#             return jsonify({"error": "Thi·∫øu key 'feature' trong JSON request!"})

#         df = pd.DataFrame([[data["feature"]]])  # Ch·ªâ l·∫•y 1 feature
#         prediction = model.predict(df)
#         return jsonify({"predicted_effort": prediction.tolist()})

#     except Exception as e:
#         return jsonify({"error": str(e)})
@app.route("/predict", methods=["POST"])
def predict():
    try:
        # Nh·∫≠n d·ªØ li·ªáu t·ª´ request JSON
        data = request.get_json()
        print("üìå D·ªØ li·ªáu nh·∫≠n ƒë∆∞·ª£c:", data)  # Debug ƒë·∫ßu v√†o

        # Ki·ªÉm tra n·∫øu d·ªØ li·ªáu kh√¥ng h·ª£p l·ªá
        if not isinstance(data, dict):
            return jsonify({"error": "D·ªØ li·ªáu g·ª≠i l√™n ph·∫£i l√† JSON object!"})

        # Ki·ªÉm tra xem c√°c feature b·∫Øt bu·ªôc c√≥ trong d·ªØ li·ªáu kh√¥ng
        required_features = ["feature", "complexity", "lines_of_code"]
        for feature in required_features:
            if feature not in data:
                return jsonify({"error": f"Thi·∫øu feature: {feature}"})

        # Chuy·ªÉn d·ªØ li·ªáu th√†nh DataFrame (Ph·∫£i l√† list ch·ª©a dictionary)
        df = pd.DataFrame([data])

        # Th·ª±c hi·ªán d·ª± ƒëo√°n
        prediction = model.predict(df)

        return jsonify({"predicted_effort": prediction.tolist()})

    except Exception as e:
        return jsonify({"error": str(e)})


if __name__ == "__main__":
    app.run(host="0.0.0.0", port=5000)
